struct TrieNode {
    bool endBy;
    TrieNode* nexts[26];
    TrieNode() {
        endBy = false;
        fill(nexts, nexts+26, nullptr);
    }
};
class WordDictionary {
    TrieNode* _root = new TrieNode();
    bool search(const string word, const int start, TrieNode* node) {
        if(start==word.size()) {
            return node==nullptr?false:node->endBy;
        }
        
        if(word[start] == '.') {
            for(int i=0;i<26;++i) {
                if(!node->nexts[i]) {
                    continue;
                }
                if(search(word, start+1, node->nexts[i])) {
                    return true;
                }
            }
            return false;
        } else {
            const int index = word[start] - 'a';
            if (!node->nexts[index]) {
                return false;
            }
            node = node->nexts[index];
            return search(word, start+1, node);
        }
    }
public:
    WordDictionary() {
        
    }
    
    void addWord(const string word) {
        TrieNode* node = _root;
        for(auto &c:word) {
            const int index = c - 'a';
            if(!node->nexts[index]) {
                node->nexts[index] = new TrieNode();
            }
            
            node = node->nexts[index];
        }
        node->endBy = true;
    }
    
    bool search(const string word) {
        return search(word, 0, _root);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
